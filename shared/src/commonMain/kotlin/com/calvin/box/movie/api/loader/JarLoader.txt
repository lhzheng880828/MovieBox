package com.calvin.box.moive.api.loader


import com.github.catvod.crawler.Spider
import com.github.catvod.crawler.SpiderNull
import kotlinx.coroutines.sync.Mutex
import kotlinx.coroutines.sync.withLock

expect class DexClassLoader
expect class Context

class JarLoader {
    private val loaders = mutableMapOf<String, DexClassLoader>()
    private val methods = mutableMapOf<String, Method>()
    private val spiders = mutableMapOf<String, Spider>()
    private val mutex = Mutex()
    private var recent: String = ""

    suspend fun clear() = mutex.withLock {
        spiders.values.forEach { it.destroy() }
        loaders.clear()
        methods.clear()
        spiders.clear()
    }

    fun setRecent(recent: String) {
        this.recent = recent
    }

    private suspend fun load(key: String, file: File) = mutex.withLock {
        loaders[key] = createDexClassLoader(file.absolutePath, Path.jar().absolutePath, null, getAppClassLoader())
        invokeInit(key)
        putProxy(key)
    }

    private suspend fun invokeInit(key: String) {
        try {
            val clz = loaders[key]?.loadClass("com.github.catvod.spider.Init")
            val method = clz?.getMethod("init", Context::class.java)
            method?.invoke(clz, getAppContext())
        } catch (e: Throwable) {
            e.printStackTrace()
        }
    }

    private suspend fun putProxy(key: String) {
        try {
            val clz = loaders[key]?.loadClass("com.github.catvod.spider.Proxy")
            val method = clz?.getMethod("proxy", Map::class.java)
            method?.let { methods[key] = it }
        } catch (e: Throwable) {
            e.printStackTrace()
        }
    }

    private suspend fun download(url: String): File {
        return try {
            Path.write(Path.jar(url), OkHttp.newCall(url).execute().body?.bytes() ?: byteArrayOf())
        } catch (e: Exception) {
            Path.jar(url)
        }
    }

    suspend fun parseJar(key: String, jar: String) = mutex.withLock {
        if (key in loaders) return@withLock
        val (jarUrl, md5) = jar.split(";md5;").let {
            it[0] to (it.getOrNull(1)?.trim() ?: "")
        }
        when {
            md5.isNotEmpty() && Util.equals(jarUrl, md5) -> load(key, Path.jar(jarUrl))
            jarUrl.startsWith("img+") -> load(key, Decoder.getSpider(jarUrl))
            jarUrl.startsWith("http") -> load(key, download(jarUrl))
            jarUrl.startsWith("file") -> load(key, Path.local(jarUrl))
            jarUrl.startsWith("assets") -> parseJar(key, UrlUtil.convert(jarUrl))
            jarUrl.isNotEmpty() -> parseJar(key, UrlUtil.convert(jarUrl))
        }
    }

    suspend fun getLoader(key: String, jar: String): DexClassLoader? = mutex.withLock {
        if (key !in loaders) parseJar(key, jar)
        return loaders[key]
    }

    suspend fun getSpider(key: String, api: String, ext: String, jar: String): Spider = mutex.withLock {
        val jaKey = Util.md5(jar)
        val spKey = jaKey + key
        return spiders.getOrPut(spKey) {
            try {
                if (jaKey !in loaders) parseJar(jaKey, jar)
                val spider = loaders[jaKey]?.loadClass("com.github.catvod.spider.${api.split("csp_")[1]}")
                    ?.newInstance() as? Spider
                spider?.init(getAppContext(), ext)
                spider ?: SpiderNull()
            } catch (e: Throwable) {
                e.printStackTrace()
                SpiderNull()
            }
        }
    }

    suspend fun jsonExt(key: String, jxs: Map<String, String>, url: String): JSONObject = mutex.withLock {
        val clz = loaders[""]?.loadClass("com.github.catvod.parser.Json$key")
        val method = clz?.getMethod("parse", Map::class.java, String::class.java)
        return method?.invoke(null, jxs, url) as? JSONObject ?: JSONObject()
    }

    suspend fun jsonExtMix(flag: String, key: String, name: String, jxs: Map<String, Map<String, String>>, url: String): JSONObject = mutex.withLock {
        val clz = loaders[""]?.loadClass("com.github.catvod.parser.Mix$key")
        val method = clz?.getMethod("parse", Map::class.java, String::class.java, String::class.java, String::class.java)
        return method?.invoke(null, jxs, name, flag, url) as? JSONObject ?: JSONObject()
    }

    suspend fun proxyInvoke(params: Map<String, String>): Array<Any>? = mutex.withLock {
        try {
            val method = methods[Util.md5(recent)]
            return method?.invoke(null, params) as? Array<Any>
        } catch (e: Throwable) {
            e.printStackTrace()
            return null
        }
    }

    companion object {
        expect fun createDexClassLoader(dexPath: String, optimizedDirectory: String, librarySearchPath: String?, parent: ClassLoader?): DexClassLoader
        expect fun getAppClassLoader(): ClassLoader
        expect fun getAppContext(): Context
    }
}