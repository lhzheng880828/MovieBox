package com.calvin.box.movie.api

import android.net.Uri
import com.calvin.box.movie.bean.Epg
import com.calvin.box.movie.bean.EpgData
import com.calvin.box.movie.bean.Live
import com.calvin.box.movie.bean.Tv
import com.calvin.box.movie.utils.Download
import com.calvin.box.movie.utils.FileUtil
import com.github.catvod.utils.Path
import com.github.catvod.utils.Trans
import org.simpleframework.xml.core.Persister

object EpgParser {
    @Throws(java.lang.Exception::class)
    fun start(live: Live): Boolean {
        if (!live.getEpg().endsWith(".xml") && !live.getEpg().endsWith(".gz")) return false
        val file: java.io.File = Path.epg(Uri.parse(live.getEpg()).getLastPathSegment())
        if (shouldDownload(file)) Download.create(live.getEpg(), file).start()
        if (file.getName().endsWith(".gz")) readGzip(live, file)
        else readXml(live, file)
        return true
    }

    private fun shouldDownload(file: java.io.File): Boolean {
        return !file.exists() || !isToday(file.lastModified())
    }

    private fun isToday(date: java.util.Date): Boolean {
        return isToday(date.getTime())
    }

    private fun isToday(millis: Long): Boolean {
        val calendar: java.util.Calendar = java.util.Calendar.getInstance()
        calendar.setTimeInMillis(millis)
        return calendar.get(java.util.Calendar.DAY_OF_MONTH) == java.util.Calendar.getInstance()
            .get(java.util.Calendar.DAY_OF_MONTH)
    }

    @Throws(java.lang.Exception::class)
    private fun readGzip(live: Live, file: java.io.File) {
        val xml: java.io.File = Path.epg(file.getName().replace(".gz", ""))
        if (!xml.exists()) FileUtil.extractGzip(file, xml)
        readXml(live, xml)
    }

    @Throws(java.lang.Exception::class)
    private fun readXml(live: Live, file: java.io.File) {
        val exist: MutableSet<String?> = java.util.HashSet<String>()
        val epgMap: MutableMap<String?, Epg> = java.util.HashMap<String, Epg>()
        val mapping: MutableMap<String, String> = java.util.HashMap<String, String>()
        val formatTime: java.text.SimpleDateFormat =
            java.text.SimpleDateFormat("HH:mm", java.util.Locale.getDefault())
        val formatDate: java.text.SimpleDateFormat =
            java.text.SimpleDateFormat("yyyy-MM-dd", java.util.Locale.getDefault())
        val formatFull: java.text.SimpleDateFormat =
            java.text.SimpleDateFormat("yyyyMMddHHmmss Z", java.util.Locale.getDefault())
        val today: String = formatDate.format(java.util.Date())
        val tv: Tv = Persister().read(Tv::class.java, Path.read(file), false)
        for (group in live.getGroups()) for (channel in group.getChannel()) exist.add(channel.getTvgName())
        for (channel in tv.getChannel()) mapping[channel.getId()] = channel.getDisplayName()
        for (programme in tv.getProgramme()) {
            val key = mapping[programme.getChannel()]
            val startDate: java.util.Date = formatFull.parse(programme.getStart())
            val endDate: java.util.Date = formatFull.parse(programme.getStop())
            if (!exist.contains(key)) continue
            if (!isToday(startDate) && !isToday(endDate)) continue
            if (!epgMap.containsKey(key)) epgMap[key] = Epg.create(key, today)
            val epgData: EpgData = EpgData()
            epgData.setTitle(Trans.s2t(programme.getTitle()))
            epgData.setStart(formatTime.format(startDate))
            epgData.setEnd(formatTime.format(endDate))
            epgData.setStartTime(startDate.getTime())
            epgData.setEndTime(endDate.getTime())
            epgMap[key].getList().add(epgData)
        }
        for (group in live.getGroups()) {
            for (channel in group.getChannel()) {
                channel.setData(epgMap[channel.getTvgName()])
            }
        }
    }
}